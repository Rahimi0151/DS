#1: Array
{
    NOTE:
    This design, does not support Circular Queue; because of that, Q.Front will always remain 1

    CREATE(ref Q : QUEUE)
    {
        Q.Rear = 1;
    }

    MAKENULL(ref Q : QUEUE)
    {
        Q.Rear = 1;
    }

    EMPTY(Q : QUEUE) : boolean
    {
        if Q.Rear == 1 then
            return TRUE;
        else
            return FALSE;
    }

    ADD-FRONT(ref DQ: DEQUEUE; x : ElementType);
    {
        if Q.Rear == MAX then
            Error( “Overflow” );
        for i from Q.Rear downto 1 do:
            Q.Elements[i+1] = Q.Elements[i];
        Elements[1] = x;

    }
    ADD-REAR(ref DQ: DEQUEUE; x : ElementType);
    {
        if Q.Rear == MAX then
            Error( “Overflow” );
        Q.Elements[Q.Rear] = x;
        Q.Rear ++;
    } 

    REMOVE-FRONT(ref DQ: DEQUEUE ): ElementType;
    {
        if Q.Rear == MAX then
            Error( “Overflow” );
        temp = Q.Elements[1]
        for i from 1 to Q.Rear:
            Q.Elements[i] = Q.Elements[i+1];
        return temp
    }

    REMOVE-REAR(ref DQ: DEQUEUE ): ElementType;
    {
        if EMPTY(Q) then
            Error( “Underflow” );

        Q.Rear --;
        return Q.Elements[Q.Rear + 1]; 
    }
}

#2: Linked List
{
    CREATE(ref Q : QUEUE)
    {
        Q.Front = Q.Rear = NULL;
        Q.Size = 0;
    }

    SIZE(Q : QUEUE) : integer
    {
        return Q.Size;
    } 
    
    EMPTY(Q : QUEUE) : boolean
    {
        if Q.Front == NULL then  // Q.Size == 0
            return TRUE; 
        else 
            return FALSE
    } 

 
    MAKENULL(ref Q : QUEUE)
    {
        var p : Position;
        p = Q.Front;
        while p ≠ NULL do
        {
            Q.Front =  Q.Front^.Next;
            dispose(p);
            p = Q.Front;
        }
        Q.Rear = NULL;
        Q.Size = 0;
    } 

    ADD-FRONT(ref Q : QUEUE; x : ElementType)
    {
        if Q.Front == NULL then
        {
            new(Q.Front);
            Q.Front^.Data = x;
            Q.Front^.Next = NULL;
            Q.Rear = Q.Front;
        }
        else
        {
            var p : Position;
            new(p);
            p^.Data = x;
            p^.Prev = NULL;
            Q.Front^.Prev = p;
            Q.Front = p;
        }
        Q.Size ++;
    }

   ADD-REAR(ref Q : QUEUE; x : ElementType)
    {
        if Q.Rear == NULL then
        {
            new(Q.Rear);
            Q.Rear^.Data = x;
            Q.Rear^.Next = NULL;
            Q.Front = Q.Rear;
        }
        else
        {
            var p : Position;
            new(p);
            p^.Data = x;
            p^.Next = NULL;
            Q.Rear^.Next = p;
            Q.Rear = p;
        }
        Q.Size ++;
    }

    REMOVE-FRONT(ref DQ: DEQUEUE ): ElementType;
    {
        if Q.Front == NULL then
            Error( “Underflow” );
        var x : ElementType;
        x = Q.Front^.Data;
        var p : Position;
        p = Q.Front;
        Q.Front = Q.Front^.Next;
        dispose( p );
        Q.Size--;
        return x;
    }

    REMOVE-REAR(ref DQ: DEQUEUE ): ElementType;
    {
        if Q.Rear == NULL then
            Error( “Underflow” );
        var x : ElementType;
        x = Q.Rear^.Data;
        var p : Position;
        p = Q.Rear;
        Q.Rear = Q.Rear^.Prev;
        dispose( p );
        Q.Size--;
        return x;
    }
}